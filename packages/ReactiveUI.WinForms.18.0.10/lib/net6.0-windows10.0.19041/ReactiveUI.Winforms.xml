<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReactiveUI.Winforms</name>
    </assembly>
    <members>
        <member name="T:ReactiveUI.Winforms.ActivationForViewFetcher">
            <summary>
            ActivationForViewFetcher is how ReactiveUI determine when a
            View is activated or deactivated. This is usually only used when porting
            ReactiveUI to a new UI framework.
            </summary>
        </member>
        <member name="M:ReactiveUI.Winforms.ActivationForViewFetcher.GetAffinityForView(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:ReactiveUI.Winforms.ActivationForViewFetcher.GetActivationForView(ReactiveUI.IActivatableView)">
            <inheritdoc/>
        </member>
        <member name="T:ReactiveUI.Winforms.ContentControlBindingHook">
            <summary>
            AutoDataTemplateBindingHook is a binding hook that checks ItemsControls
            that don't have DataTemplates, and assigns a default DataTemplate that
            loads the View associated with each ViewModel.
            </summary>
        </member>
        <member name="M:ReactiveUI.Winforms.ContentControlBindingHook.ExecuteHook(System.Object,System.Object,System.Func{ReactiveUI.IObservedChange{System.Object,System.Object}[]},System.Func{ReactiveUI.IObservedChange{System.Object,System.Object}[]},ReactiveUI.BindingDirection)">
            <inheritdoc/>
        </member>
        <member name="T:ReactiveUI.Winforms.CreatesWinformsCommandBinding">
            <summary>
            This binder is the default binder for connecting to arbitrary events.
            </summary>
        </member>
        <member name="M:ReactiveUI.Winforms.CreatesWinformsCommandBinding.GetAffinityForObject(System.Type,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ReactiveUI.Winforms.CreatesWinformsCommandBinding.BindCommandToObject(System.Windows.Input.ICommand,System.Object,System.IObservable{System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:ReactiveUI.Winforms.CreatesWinformsCommandBinding.BindCommandToObject``1(System.Windows.Input.ICommand,System.Object,System.IObservable{System.Object},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ReactiveUI.Winforms.ObservableCollectionChangedToListChangedTransformer.AsListChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Transforms a NotifyCollectionChangedEventArgs into zero or more ListChangedEventArgs.
            </summary>
            <param name="ea">The event args.</param>
            <returns>An enumerable of <see cref="T:System.ComponentModel.ListChangedEventArgs"/>.</returns>
        </member>
        <member name="T:ReactiveUI.Winforms.PanelSetMethodBindingConverter">
            <summary>
            A converter that can handle setting values on a <see cref="T:System.Windows.Forms.Panel"/> control for binding.
            </summary>
        </member>
        <member name="M:ReactiveUI.Winforms.PanelSetMethodBindingConverter.GetAffinityForObjects(System.Type,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:ReactiveUI.Winforms.PanelSetMethodBindingConverter.PerformSet(System.Object,System.Object,System.Object[])">
            <inheritdoc />
        </member>
        <member name="T:ReactiveUI.Winforms.PlatformOperations">
            <summary>
            Returns the current orientation of the device on Windows.
            </summary>
        </member>
        <member name="M:ReactiveUI.Winforms.PlatformOperations.GetOrientation">
            <inheritdoc/>
        </member>
        <member name="T:ReactiveUI.Winforms.ReactiveUserControl`1">
            <summary>
            This is an  UserControl that is both and UserControl and has a ReactiveObject powers
            (i.e. you can call RaiseAndSetIfChanged).
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <seealso cref="T:System.Windows.Forms.UserControl" />
            <seealso cref="T:ReactiveUI.IViewFor`1" />
        </member>
        <member name="M:ReactiveUI.Winforms.ReactiveUserControl`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ReactiveUI.Winforms.ReactiveUserControl`1"/> class.
            </summary>
        </member>
        <member name="P:ReactiveUI.Winforms.ReactiveUserControl`1.ViewModel">
            <inheritdoc/>
        </member>
        <member name="P:ReactiveUI.Winforms.ReactiveUserControl`1.ReactiveUI#IViewFor#ViewModel">
            <inheritdoc/>
        </member>
        <member name="M:ReactiveUI.Winforms.ReactiveUserControl`1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="F:ReactiveUI.Winforms.ReactiveUserControl`1.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ReactiveUI.Winforms.ReactiveUserControl`1.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ReactiveUI.Winforms.Registrations">
            <summary>
            .NET Framework platform registrations.
            </summary>
            <seealso cref="T:ReactiveUI.IWantsToRegisterStuff" />
        </member>
        <member name="M:ReactiveUI.Winforms.Registrations.Register(System.Action{System.Func{System.Object},System.Type})">
            <inheritdoc/>
        </member>
        <member name="T:ReactiveUI.Winforms.RoutedControlHost">
            <summary>
            A control host which will handling routing between different ViewModels and Views.
            </summary>
        </member>
        <member name="M:ReactiveUI.Winforms.RoutedControlHost.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ReactiveUI.Winforms.RoutedControlHost"/> class.
            </summary>
        </member>
        <member name="E:ReactiveUI.Winforms.RoutedControlHost.PropertyChanging">
            <inheritdoc/>
        </member>
        <member name="E:ReactiveUI.Winforms.RoutedControlHost.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="P:ReactiveUI.Winforms.RoutedControlHost.DefaultContent">
            <summary>
            Gets or sets the default content.
            </summary>
            <value>
            The default content.
            </value>
        </member>
        <member name="P:ReactiveUI.Winforms.RoutedControlHost.Router">
            <summary>
            Gets or sets the <see cref="T:ReactiveUI.RoutingState"/> of the view model stack.
            </summary>
        </member>
        <member name="P:ReactiveUI.Winforms.RoutedControlHost.ViewContractObservable">
            <summary>
            Gets or sets the view contract observable.
            </summary>
        </member>
        <member name="P:ReactiveUI.Winforms.RoutedControlHost.ViewLocator">
            <summary>
            Gets or sets the view locator.
            </summary>
        </member>
        <member name="M:ReactiveUI.Winforms.RoutedControlHost.ReactiveUI#IReactiveObject#RaisePropertyChanging(System.ComponentModel.PropertyChangingEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ReactiveUI.Winforms.RoutedControlHost.ReactiveUI#IReactiveObject#RaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ReactiveUI.Winforms.RoutedControlHost.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="F:ReactiveUI.Winforms.RoutedControlHost.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ReactiveUI.Winforms.RoutedControlHost.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ReactiveUI.Winforms.TableContentSetMethodBindingConverter">
            <summary>
            A binding set converter which will convert from a Table.
            </summary>
        </member>
        <member name="M:ReactiveUI.Winforms.TableContentSetMethodBindingConverter.GetAffinityForObjects(System.Type,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:ReactiveUI.Winforms.TableContentSetMethodBindingConverter.PerformSet(System.Object,System.Object,System.Object[])">
            <inheritdoc />
        </member>
        <member name="T:ReactiveUI.Winforms.ViewModelControlHost">
            <summary>
            A view model control host which will find and host the View for a ViewModel.
            </summary>
        </member>
        <member name="M:ReactiveUI.Winforms.ViewModelControlHost.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ReactiveUI.Winforms.ViewModelControlHost"/> class.
            </summary>
        </member>
        <member name="E:ReactiveUI.Winforms.ViewModelControlHost.PropertyChanging">
            <inheritdoc/>
        </member>
        <member name="E:ReactiveUI.Winforms.ViewModelControlHost.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="P:ReactiveUI.Winforms.ViewModelControlHost.DefaultCacheViewsEnabled">
            <summary>
            Gets or sets a value indicating whether [default cache views enabled].
            </summary>
        </member>
        <member name="P:ReactiveUI.Winforms.ViewModelControlHost.CurrentView">
            <summary>
            Gets the current view.
            </summary>
        </member>
        <member name="P:ReactiveUI.Winforms.ViewModelControlHost.DefaultContent">
            <summary>
            Gets or sets the default content.
            </summary>
        </member>
        <member name="P:ReactiveUI.Winforms.ViewModelControlHost.ViewContractObservable">
            <summary>
            Gets or sets the view contract observable.
            </summary>
            <value>
            The view contract observable.
            </value>
        </member>
        <member name="P:ReactiveUI.Winforms.ViewModelControlHost.ViewLocator">
            <summary>
            Gets or sets the view locator.
            </summary>
        </member>
        <member name="P:ReactiveUI.Winforms.ViewModelControlHost.ViewModel">
            <inheritdoc/>
        </member>
        <member name="P:ReactiveUI.Winforms.ViewModelControlHost.Content">
            <summary>
            Gets or sets the content.
            </summary>
        </member>
        <member name="P:ReactiveUI.Winforms.ViewModelControlHost.CacheViews">
            <summary>
            Gets or sets a value indicating whether to cache views.
            </summary>
        </member>
        <member name="M:ReactiveUI.Winforms.ViewModelControlHost.ReactiveUI#IReactiveObject#RaisePropertyChanging(System.ComponentModel.PropertyChangingEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ReactiveUI.Winforms.ViewModelControlHost.ReactiveUI#IReactiveObject#RaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ReactiveUI.Winforms.ViewModelControlHost.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="F:ReactiveUI.Winforms.ViewModelControlHost.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ReactiveUI.Winforms.ViewModelControlHost.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ReactiveUI.Winforms.WinformsCreatesObservableForProperty">
            <summary>
            WinForm view objects are not Generally Observable™, so hard-code some
            particularly useful types.
            </summary>
            <seealso cref="T:ReactiveUI.ICreatesObservableForProperty" />
        </member>
        <member name="M:ReactiveUI.Winforms.WinformsCreatesObservableForProperty.GetAffinityForObject(System.Type,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ReactiveUI.Winforms.WinformsCreatesObservableForProperty.GetNotificationForProperty(System.Object,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
    </members>
</doc>
